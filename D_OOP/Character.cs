using System;
using System.Collections.Generic;
using System.Text;

namespace D_OOP
{
    public class Character
    {//модификаторы доступа
     //свойства всегда public
     //классы public or internal
     //методы:
     /*public: публичный, общедоступный класс или член класса.
 * Такой член класса доступен из любого места в коде, 
 * а также из других программ и сборок.

private: закрытый класс или член класса.
Представляет полную противоположность модификатору public.
Такой закрытый класс или член класса доступен только из кода 
в том же классе или контексте.

protected: такой член класса доступен из любого места в 
текущем классе или в производных классах. 
При этом производные классы могут располагаться в других сборках.

internal: класс и члены класса с подобным модификатором доступны
из любого места кода в той же сборке, однако 
он недоступен для других программ и сборок 
(как в случае с модификатором public).

protected internal: совмещает функционал двух модификаторов. 
Классы и члены класса с таким модификатором доступны из текущей 
сборки и из производных классов.

private protected: такой член класса доступен из любого места 
в текущем классе или в производных классах, которые определены 
в той же сборке. */



        //содержит данные и методы

        //private int health = 100;

        //поведение класса задётся методами(функциями)
        //в C# нет функций только методы
        //функция считается, когда объявлена вне класса

        //Объъявляем свойство(всегда public)
        //на самом деле GET and SET = МЕТОДЫ
        //доступ на чтение
        //доступ на запись закрыли(может быть protected or internal)
        public int Health { get; private set; } = 100; //автосвойство
                                                       //либо с закрытым set/ открытм set
                                                       //public int GetHealth()
                                                       //  { 
                                                       //    return health;
                                                       //}
                                                       //private void SetHealth(int value)
                                                       //{
                                                       //    health = value;
                                                       //}

        public void Hit(int damage)
        {
            if (damage > Health)
            {
                damage = Health;
            }
            Health -= damage;


        }
        //void= пустой, невозвратный(он просто что-то делает)
        //создаем статическое поле 
        public static int Speed = 70;

        //добавим метод
        ///не статические члены, имеют доступ к статическим членам
        ///Speed всегда будет одним и тем же
        public int PrintSpeed()
        {
            return Speed;
        }

        public void IncreaseSpeed()
        {
            Speed += 20;
        }


    }

}
